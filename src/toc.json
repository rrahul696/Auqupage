{
	"course_code": "UE16CS254",
	"questions": [
		{
			"question": "pumping Lemma To show that the language L = { (ab)n | n >= 0 } is regular",
			"options": [
				"create a finite state machine for this language.",
				"use pumping lemma for regular languages.",
				"create a push down automaton.",
				"cannot prove as the language is not regular."
			],"expected_answer": ""
		},
		{
			"question": "pumping Lemma To show that L = { a n b n | n >= 0} is not regular",
		"options": [
			"use pumping lemma to show contradiction; select w = a m",
			"use pumping lemma to show contradiction; select w = a m/2bm/2 ",
			"construct regular expression",
			"implement a NFA"
		],"expected_answer": ""
		},
		{
			"question": "CFG grammar for L = { a n b n  cm dm| n >= 0, m >= 0} is",
		"options": [
			"S -> AB; A -> aAb| Ʌ;  B -> cBd|Ʌ ",
			"S -> aSd | Ʌ; S -> A; A -> bAc| Ʌ;  A -> Ʌ ",
			"S -> aA|Ʌ;  A -> aA | B | Ʌ; B -> bB | C | Ʌ; C -> cC | D | Ʌ; D -> dD | Ʌ ",
			"S -> aSb| Ʌ; S -> A; A ->bAd | Ʌ"
			],"expected_answer": ""
		},
		{
			"question": "CFG\nS -> aSb | bSa | Ʌ\nWhich string does not belong to L(G)? ",
		"options": [
			"abba",
			"abab",
			"aabb ",
			"baba "
			],"expected_answer": ""
		},
		{
			"question": "ambiguity\nS -> aaS | aaaS | Ʌ ",
		"options": [
			"grammar is ambiguous and language  is not inherently ambiguous ",
			"grammar is ambiguous and language is inherently ambiguous",
			"grammar is not ambiguous and language is ambiguous",
			"grammar is not ambiguous and language is not ambiguous "
			],"expected_answer": ""
		},
		{
			"question": "ambiguity\nS -> aSb | SS | ab\nWhich of the following strings shows that the grammar is ambigous?",
		"options": [
			"ababab",
			"aaabbb ",
			"ab",
			"aabb "
			],"expected_answer": ""
		},{
			"question": "CFG\nWhich of the following is true? ",
			"options": [
				"All regular grammars are context free ",
				"All context free grammars are regular  ",
				"Context free grammars can have only one variable to the right in a production ",
				"Context free grammar can have more than one grammar symbol to the left in a production "
			],"expected_answer": ""
		},
		{
			"question": "CFG\nL = { a\nn\nb\n2n\n| n >= 0 }. Grammar for this language is  ",
			"options": [
				"S -> aSbb | Ʌ ",
				"S -> aSB ; B -> bb  ",
				"S -> aSbb | abb ",
				"S -> ASBB; A -> a; B -> b "
				],"expected_answer": ""
		},
		{
			"question": "CFG\nL = {  w = a\nn\nb\nn+1\nc\nn+2\n|  |w| <= 100 }",
			"options": [
				"is regular",
				"is context free ",
				"is not context free",
				"is inherently ambiguous"
				],"expected_answer": ""
		},
		{
			"question": "CFG\nWhat is the language generated by this grammar. S -> aaS | Sbb | aaSbb | Ʌ",
			"options": [
				"L = { (aa)*(bb)*| n >= 0 }",
				"L = { (aa)n(bb)n| n >= 0 } ",
				"L = { (ab)n| n >= 0 }",
				"L = { (aa)n|(bb)n | n >= 0 }"
			],"expected_answer": ""
		},
		{
			"question": "Nullable S -> ABaC; A -> BC; B -> b | Ʌ; C -> c | Ʌ Which of the following is true? ",
			"options": [
				"A is nullable ",
				"The number of productions from S after removing nullable productions is   7",
				"S -> a is not a valid production after removing nullable productions",
				"A -> Ʌ is a valid production after removing nullable productions."
			],"expected_answer": ""
		},
		{
			"question": "CYK State which is true with respect to CYK algorithm for checking membership of a string s[1 .. n] in some CFG. ",
			"options": [
				"s belongs to the L(G) if and only if cell numbered 1,n has the start symbol S",
				"s belongs to the L(G) if and only if cell numbered 1,n has any non-terminal symbol other than S ",
				" if cell numbered 1, n has more than one non-terminal and no S, the grammar is ambiguous",
				"if cell numbered 1, n has more than one non-terminal other than S, the language is ambiguous "
			],"expected_answer": ""
		},
		{
			"question": "CNF S -> aSa | aa CNF of the above grammar is: ",
			"options": [
				"S -> XY | XX; X -> a; Y -> SX ",
				"S -> XS | XX; X -> a; S -> a ",
				"S -> aSX; X -> a; S -> a ",
				"cannot convert to CNF "
			],"expected_answer": ""
		},
		{
			"question": "GNF S -> aSb | bSa | ab | ba The equivalent GNF  grammar is",
			"options": [
				"abba",
				"abab",
				"aabb ",
				"baba "
			],"expected_answer": ""
		}
	]
}
